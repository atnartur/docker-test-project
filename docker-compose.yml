# версия файла. Подробнее https://docs.docker.com/compose/compose-file/
version: '2'

# описание сервисов проекта. При создании проекта названия контейнеров будут
# создаваться следующим образом: будет подставляться название проекта, затем
# подчеркивание, затем название контейнера.
# Название проекта берется из названия папки, в которой сейчас мы находимся.
services:
  # таким образом, если проект называется examplesite, то контейнер web будет
  # называться examplesite_web_1, где 1 - номер контейнера (в docker-compose)
  # есть возможность запустить несколько контейнеров в целях масштабирования
  web:
    image: nginx:latest # образ
    # прокидываем порт. Внимание: во время запуска проекта все остальные
    # программы, занимающие 80 порт, должны быть, конечно же, выключены
    ports:
      - 80:80
    depends_on: # этот контейнер зависит от php и связывается с ним
      - php
    volumes_from: # берем волумы, проброшенные с контейнера data
      - data

  # nodejs container
  daemon:
    image: node:6
    command: node app # команда для запуска в контейнере
    working_dir: /srv/www/app # рабочая директория
    volumes_from:
      - data
    ports:
      - 8080:3000

  php:
    image: atnartur/php:7.0.11-fpm-phalcon3.0.1
    working_dir: /srv/www/app # рабочая директория, в которй будут запускаться все команды
    # ждем полного запуска базы данных, выполняем миграции и запускаем php-fpm
    command: sh -c "./wait-for-it.sh db:5432 && php vendor/bin/phinx migrate && php-fpm -RF"
    depends_on:
      - db
    volumes_from:
      - data
    volumes:
      # именованный волум - хранится в недрах докера в файловой системе
      - system-tmp:/tmp

  db:
    image: postgres:9.6
    ports:
      - 5432:5432
    # проброс переменных окружения
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: password
    volumes:
      - db:/var/lib/postgresql/data

  # админка БД
  pgweb:
    image: donnex/pgweb
    depends_on: # зависит от базы данных
      - db
    ports: # запускается на нестандартном порту чтобы не блокировать основной порт
      - 8081:8080

  # подключем контейнер data, который был собран на предыдущем шаге
  data:
    image: docker_test_project
    # в целях разработки жестко прокидываем текущую папку проекта в контейнер для того,
    # чтобы в контенерах сразу же отображались изменения, которые мы производим.
    volumes:
      - /etc/nginx
      - ./:/srv/www/app

# определение волумов - подробнее https://docs.docker.com/engine/tutorials/dockervolumes/
volumes:
  system-tmp:
    driver: local
  db:
    driver: local